=begin
#Patch API V1

#The core API used to integrate with Patch's service

The version of the OpenAPI document: v1
Contact: developers@usepatch.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'date'
require 'time'

module Patch
  class Offset
    # A unique uid for the record. UIDs will be prepended by off_prod or off_test depending on the mode it was created in.
    attr_accessor :id

    # The amount of carbon offset mass in grams already allocated from this offset.
    attr_accessor :allocated_mass_g

    # The amount of carbon offsets in grams for this offset.
    attr_accessor :mass_g

    # The total price in cents USD of this carbon offset.
    attr_accessor :price_cents_usd

    # A boolean indicating if this offset is a production or test mode offset.
    attr_accessor :production

    attr_accessor :retired

    # The serial number for this offset.
    attr_accessor :serial_number

    attr_accessor :vintage_year

    attr_accessor :project_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'allocated_mass_g' => :'allocated_mass_g',
        :'mass_g' => :'mass_g',
        :'price_cents_usd' => :'price_cents_usd',
        :'production' => :'production',
        :'retired' => :'retired',
        :'serial_number' => :'serial_number',
        :'vintage_year' => :'vintage_year',
        :'project_id' => :'project_id'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'allocated_mass_g' => :'Integer',
        :'mass_g' => :'Integer',
        :'price_cents_usd' => :'Integer',
        :'production' => :'Boolean',
        :'retired' => :'Boolean',
        :'serial_number' => :'String',
        :'vintage_year' => :'Integer',
        :'project_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'serial_number',
      ])
    end


    # Allows models with corresponding API classes to delegate API operations to those API classes
    # Exposes Model.operation_id which delegates to ModelsApi.new.operation_id
    # Eg. Order.create_order delegates to OrdersApi.new.create_order
    def self.method_missing(message, *args, &block)
      if Object.const_defined?('Patch::OffsetsApi::OPERATIONS') && Patch::OffsetsApi::OPERATIONS.include?(message)
        Patch::OffsetsApi.new.send(message, *args)
      else
        super
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Patch::Offset` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Patch::Offset`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'allocated_mass_g')
        self.allocated_mass_g = attributes[:'allocated_mass_g']
      end

      if attributes.key?(:'mass_g')
        self.mass_g = attributes[:'mass_g']
      end

      if attributes.key?(:'price_cents_usd')
        self.price_cents_usd = attributes[:'price_cents_usd']
      end

      if attributes.key?(:'production')
        self.production = attributes[:'production']
      end

      if attributes.key?(:'retired')
        self.retired = attributes[:'retired']
      end

      if attributes.key?(:'serial_number')
        self.serial_number = attributes[:'serial_number']
      end

      if attributes.key?(:'vintage_year')
        self.vintage_year = attributes[:'vintage_year']
      end

      if attributes.key?(:'project_id')
        self.project_id = attributes[:'project_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @allocated_mass_g.nil?
        invalid_properties.push('invalid value for "allocated_mass_g", allocated_mass_g cannot be nil.')
      end

      if @allocated_mass_g > 100000000000
        invalid_properties.push('invalid value for "allocated_mass_g", must be smaller than or equal to 100000000000.')
      end

      if @allocated_mass_g < 0
        invalid_properties.push('invalid value for "allocated_mass_g", must be greater than or equal to 0.')
      end

      if @mass_g.nil?
        invalid_properties.push('invalid value for "mass_g", mass_g cannot be nil.')
      end

      if @mass_g > 100000000000
        invalid_properties.push('invalid value for "mass_g", must be smaller than or equal to 100000000000.')
      end

      if @mass_g < 0
        invalid_properties.push('invalid value for "mass_g", must be greater than or equal to 0.')
      end

      if @price_cents_usd.nil?
        invalid_properties.push('invalid value for "price_cents_usd", price_cents_usd cannot be nil.')
      end

      if @production.nil?
        invalid_properties.push('invalid value for "production", production cannot be nil.')
      end

      if @retired.nil?
        invalid_properties.push('invalid value for "retired", retired cannot be nil.')
      end

      if @vintage_year.nil?
        invalid_properties.push('invalid value for "vintage_year", vintage_year cannot be nil.')
      end

      if @project_id.nil?
        invalid_properties.push('invalid value for "project_id", project_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @allocated_mass_g.nil?
      return false if @allocated_mass_g > 100000000000
      return false if @allocated_mass_g < 0
      return false if @mass_g.nil?
      return false if @mass_g > 100000000000
      return false if @mass_g < 0
      return false if @price_cents_usd.nil?
      return false if @production.nil?
      return false if @retired.nil?
      return false if @vintage_year.nil?
      return false if @project_id.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] allocated_mass_g Value to be assigned
    def allocated_mass_g=(allocated_mass_g)
      if allocated_mass_g.nil?
        fail ArgumentError, 'allocated_mass_g cannot be nil'
      end

      if allocated_mass_g > 100000000000
        fail ArgumentError, 'invalid value for "allocated_mass_g", must be smaller than or equal to 100000000000.'
      end

      if allocated_mass_g < 0
        fail ArgumentError, 'invalid value for "allocated_mass_g", must be greater than or equal to 0.'
      end

      @allocated_mass_g = allocated_mass_g
    end

    # Custom attribute writer method with validation
    # @param [Object] mass_g Value to be assigned
    def mass_g=(mass_g)
      if mass_g.nil?
        fail ArgumentError, 'mass_g cannot be nil'
      end

      if mass_g > 100000000000
        fail ArgumentError, 'invalid value for "mass_g", must be smaller than or equal to 100000000000.'
      end

      if mass_g < 0
        fail ArgumentError, 'invalid value for "mass_g", must be greater than or equal to 0.'
      end

      @mass_g = mass_g
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          allocated_mass_g == o.allocated_mass_g &&
          mass_g == o.mass_g &&
          price_cents_usd == o.price_cents_usd &&
          production == o.production &&
          retired == o.retired &&
          serial_number == o.serial_number &&
          vintage_year == o.vintage_year &&
          project_id == o.project_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, allocated_mass_g, mass_g, price_cents_usd, production, retired, serial_number, vintage_year, project_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Patch.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
