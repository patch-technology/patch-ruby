=begin
#Patch API V1

#The core API used to integrate with Patch's service

The version of the OpenAPI document: v1
Contact: developers@usepatch.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module Patch
  class EstimatesApi
    OPERATIONS = [
      :create_mass_estimate,
      :retrieve_estimate,
      :retrieve_estimates,
    ]

    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an estimate based on mass of CO2
    # Creates an estimate for the mass of CO2 to be compensated. An order in the `draft` state will also be created, linked to the estimate. 
    # @param create_mass_estimate_request [CreateMassEstimateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EstimateResponse]
    def create_mass_estimate(create_mass_estimate_request, opts = {})
      data, _status_code, _headers = create_mass_estimate_with_http_info(create_mass_estimate_request, opts)
      data
    end

    # Create an estimate based on mass of CO2
    # Creates an estimate for the mass of CO2 to be compensated. An order in the &#x60;draft&#x60; state will also be created, linked to the estimate. 
    # @param create_mass_estimate_request [CreateMassEstimateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EstimateResponse, Integer, Hash)>] EstimateResponse data, response status code and response headers
    def create_mass_estimate_with_http_info(create_mass_estimate_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EstimatesApi.create_mass_estimate ...'
      end
      # verify the required parameter 'create_mass_estimate_request' is set
      if @api_client.config.client_side_validation && create_mass_estimate_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_mass_estimate_request' when calling EstimatesApi.create_mass_estimate"
      end
      # resource path
      local_var_path = '/v1/estimates/mass'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_mass_estimate_request) 

      # return_type
      return_type = opts[:return_type] || 'EstimateResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearer_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstimatesApi#create_mass_estimate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves an estimate
    # Retrieves a given estimate and its associated order. You can only retrieve estimates associated with the organization you are querying for. 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [EstimateResponse]
    def retrieve_estimate(id, opts = {})
      data, _status_code, _headers = retrieve_estimate_with_http_info(id, opts)
      data
    end

    # Retrieves an estimate
    # Retrieves a given estimate and its associated order. You can only retrieve estimates associated with the organization you are querying for. 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EstimateResponse, Integer, Hash)>] EstimateResponse data, response status code and response headers
    def retrieve_estimate_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EstimatesApi.retrieve_estimate ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EstimatesApi.retrieve_estimate"
      end
      # resource path
      local_var_path = '/v1/estimates/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EstimateResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearer_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstimatesApi#retrieve_estimate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a list of estimates
    # Retrieves a list of estimates and their associated orders. You can only retrieve estimates associated with the organization you are querying for. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @return [EstimateListResponse]
    def retrieve_estimates(opts = {})
      data, _status_code, _headers = retrieve_estimates_with_http_info(opts)
      data
    end

    # Retrieves a list of estimates
    # Retrieves a list of estimates and their associated orders. You can only retrieve estimates associated with the organization you are querying for. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @return [Array<(EstimateListResponse, Integer, Hash)>] EstimateListResponse data, response status code and response headers
    def retrieve_estimates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EstimatesApi.retrieve_estimates ...'
      end
      # resource path
      local_var_path = '/v1/estimates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EstimateListResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearer_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstimatesApi#retrieve_estimates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
