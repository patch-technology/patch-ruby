=begin
#Patch API V1

#The core API used to integrate with Patch's service

The version of the OpenAPI document: v1
Contact: engineering@usepatch.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'cgi'

module Patch
  class ShippingApi
    OPERATIONS = [
      :create_air_shipping_estimate,
      :create_rail_shipping_estimate,
      :create_road_shipping_estimate,
      :create_sea_shipping_estimate,
    ]

    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a GLEC air shipping estimate given freight mass and logistics
    # Creates a GLEC air shipping estimate for the amount of CO2 to be compensated. An order in the `draft` state may be created based on the parameters, linked to the estimate. 
    # @param create_air_shipping_estimate_request [CreateAirShippingEstimateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EstimateResponse]
    def create_air_shipping_estimate(create_air_shipping_estimate_request = {}, opts = {})
      _create_air_shipping_estimate_request = Patch::CreateAirShippingEstimateRequest.new(create_air_shipping_estimate_request) 
      data, _status_code, _headers = create_air_shipping_estimate_with_http_info(_create_air_shipping_estimate_request, opts)
      data
    end

    # Creates a GLEC air shipping estimate given freight mass and logistics
    # Creates a GLEC air shipping estimate for the amount of CO2 to be compensated. An order in the &#x60;draft&#x60; state may be created based on the parameters, linked to the estimate. 
    # @param create_air_shipping_estimate_request [CreateAirShippingEstimateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EstimateResponse, Integer, Hash)>] EstimateResponse data, response status code and response headers
    def create_air_shipping_estimate_with_http_info(create_air_shipping_estimate_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShippingApi.create_air_shipping_estimate ...'
      end
      # verify the required parameter 'create_air_shipping_estimate_request' is set
      if @api_client.config.client_side_validation && create_air_shipping_estimate_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_air_shipping_estimate_request' when calling ShippingApi.create_air_shipping_estimate"
      end
      # resource path
      local_var_path = '/v1/shipping/air'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_air_shipping_estimate_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EstimateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer_auth']

      new_options = opts.merge(
        :operation => :"ShippingApi.create_air_shipping_estimate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShippingApi#create_air_shipping_estimate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a GLEC rail shipping estimate given freight mass and logistics
    # Creates a GLEC rail shipping estimate for the amount of CO2 to be compensated. An order in the `draft` state may be created based on the parameters, linked to the estimate. 
    # @param create_rail_shipping_estimate_request [CreateRailShippingEstimateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EstimateResponse]
    def create_rail_shipping_estimate(create_rail_shipping_estimate_request = {}, opts = {})
      _create_rail_shipping_estimate_request = Patch::CreateRailShippingEstimateRequest.new(create_rail_shipping_estimate_request) 
      data, _status_code, _headers = create_rail_shipping_estimate_with_http_info(_create_rail_shipping_estimate_request, opts)
      data
    end

    # Creates a GLEC rail shipping estimate given freight mass and logistics
    # Creates a GLEC rail shipping estimate for the amount of CO2 to be compensated. An order in the &#x60;draft&#x60; state may be created based on the parameters, linked to the estimate. 
    # @param create_rail_shipping_estimate_request [CreateRailShippingEstimateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EstimateResponse, Integer, Hash)>] EstimateResponse data, response status code and response headers
    def create_rail_shipping_estimate_with_http_info(create_rail_shipping_estimate_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShippingApi.create_rail_shipping_estimate ...'
      end
      # verify the required parameter 'create_rail_shipping_estimate_request' is set
      if @api_client.config.client_side_validation && create_rail_shipping_estimate_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_rail_shipping_estimate_request' when calling ShippingApi.create_rail_shipping_estimate"
      end
      # resource path
      local_var_path = '/v1/shipping/rail'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_rail_shipping_estimate_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EstimateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer_auth']

      new_options = opts.merge(
        :operation => :"ShippingApi.create_rail_shipping_estimate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShippingApi#create_rail_shipping_estimate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a GLEC road shipping estimate given freight mass and logistics
    # Creates a GLEC road shipping estimate for the amount of CO2 to be compensated. An order in the `draft` state may be created based on the parameters, linked to the estimate. 
    # @param create_road_shipping_estimate_request [CreateRoadShippingEstimateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EstimateResponse]
    def create_road_shipping_estimate(create_road_shipping_estimate_request = {}, opts = {})
      _create_road_shipping_estimate_request = Patch::CreateRoadShippingEstimateRequest.new(create_road_shipping_estimate_request) 
      data, _status_code, _headers = create_road_shipping_estimate_with_http_info(_create_road_shipping_estimate_request, opts)
      data
    end

    # Creates a GLEC road shipping estimate given freight mass and logistics
    # Creates a GLEC road shipping estimate for the amount of CO2 to be compensated. An order in the &#x60;draft&#x60; state may be created based on the parameters, linked to the estimate. 
    # @param create_road_shipping_estimate_request [CreateRoadShippingEstimateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EstimateResponse, Integer, Hash)>] EstimateResponse data, response status code and response headers
    def create_road_shipping_estimate_with_http_info(create_road_shipping_estimate_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShippingApi.create_road_shipping_estimate ...'
      end
      # verify the required parameter 'create_road_shipping_estimate_request' is set
      if @api_client.config.client_side_validation && create_road_shipping_estimate_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_road_shipping_estimate_request' when calling ShippingApi.create_road_shipping_estimate"
      end
      # resource path
      local_var_path = '/v1/shipping/road'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_road_shipping_estimate_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EstimateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer_auth']

      new_options = opts.merge(
        :operation => :"ShippingApi.create_road_shipping_estimate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShippingApi#create_road_shipping_estimate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a GLEC sea shipping estimate given freight mass and logistics
    # Creates a GLEC sea shipping estimate for the amount of CO2 to be compensated. An order in the `draft` state may be created based on the parameters, linked to the estimate. 
    # @param create_sea_shipping_estimate_request [CreateSeaShippingEstimateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EstimateResponse]
    def create_sea_shipping_estimate(create_sea_shipping_estimate_request = {}, opts = {})
      _create_sea_shipping_estimate_request = Patch::CreateSeaShippingEstimateRequest.new(create_sea_shipping_estimate_request) 
      data, _status_code, _headers = create_sea_shipping_estimate_with_http_info(_create_sea_shipping_estimate_request, opts)
      data
    end

    # Creates a GLEC sea shipping estimate given freight mass and logistics
    # Creates a GLEC sea shipping estimate for the amount of CO2 to be compensated. An order in the &#x60;draft&#x60; state may be created based on the parameters, linked to the estimate. 
    # @param create_sea_shipping_estimate_request [CreateSeaShippingEstimateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EstimateResponse, Integer, Hash)>] EstimateResponse data, response status code and response headers
    def create_sea_shipping_estimate_with_http_info(create_sea_shipping_estimate_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShippingApi.create_sea_shipping_estimate ...'
      end
      # verify the required parameter 'create_sea_shipping_estimate_request' is set
      if @api_client.config.client_side_validation && create_sea_shipping_estimate_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_sea_shipping_estimate_request' when calling ShippingApi.create_sea_shipping_estimate"
      end
      # resource path
      local_var_path = '/v1/shipping/sea'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_sea_shipping_estimate_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EstimateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer_auth']

      new_options = opts.merge(
        :operation => :"ShippingApi.create_sea_shipping_estimate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShippingApi#create_sea_shipping_estimate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
